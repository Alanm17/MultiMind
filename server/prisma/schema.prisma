datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String
  createdAt    DateTime  @default(now())
  projects     Project[]
}

model Project {
  id           String          @id @default(uuid())
  userId       String
  name         String
  createdAt    DateTime        @default(now())
  user         User            @relation(fields: [userId], references: [id])
  files        ProjectFile[]
  agentTasks   AgentTask[]
  chatSessions ChatSession[]
  traceLogs    AgentTraceLog[]
  memories     ProjectMemory[]
}

model ProjectFile {
  id        String  @id @default(uuid())
  projectId String
  filePath  String
  content   String
  isFolder  Boolean  @default(false)
  parentId  String?
  project   Project @relation(fields: [projectId], references: [id])
}

model AgentTask {
  id              String   @id @default(uuid())
  projectId       String
  agentName       String
  taskDescription String
  status          String
  createdAt       DateTime @default(now())
  project         Project  @relation(fields: [projectId], references: [id])
}

model ChatSession {
  id              String          @id @default(uuid())
  projectId       String
  name            String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  maxMessages     Int?            // Optional: per-session message limit
  maxTokens       Int?            // Optional: per-session token limit
  project         Project         @relation(fields: [projectId], references: [id])
  messages        ChatMessage[]
  memorySummaries MemorySummary[]
  traceLogs       AgentTraceLog[]
}

model ChatMessage {
  id        String      @id @default(uuid())
  sessionId String
  role      String
  content   String
  createdAt DateTime    @default(now())
  session   ChatSession @relation(fields: [sessionId], references: [id])
}

model MemorySummary {
  id          String      @id @default(uuid())
  sessionId   String      @unique
  summary     String
  lastUpdated DateTime    @updatedAt
  session     ChatSession @relation(fields: [sessionId], references: [id])
}

model AgentTraceLog {
  id        String   @id @default(uuid())
  sessionId String
  projectId String?
  agentName String
  prompt    String
  response  String
  context   Json
  createdAt DateTime @default(now())

  session ChatSession @relation(fields: [sessionId], references: [id])
  project Project?    @relation(fields: [projectId], references: [id])
}

model ProjectMemory {
  id         String   @id @default(uuid())
  projectId  String
  key        String
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  project    Project  @relation(fields: [projectId], references: [id])

  @@unique([projectId, key])
}
